---
source: sd-core/src/language/mod.rs
expression: to_pet(&graph)
---
Graph {
    Ty: "Directed",
    node_count: 2,
    edge_count: 1,
    edges: (0, 1),
    node weights: {
        0: Thunk(
            Graph {
                Ty: "Directed",
                node_count: 5,
                edge_count: 3,
                edges: (2, 1), (1, 3), (4, 2),
                node weights: {
                    0: Edge(
                        BoundVar(
                            Var {
                                name: Name(
                                    "a",
                                ),
                            },
                        ),
                    ),
                    1: Thunk(
                        Graph {
                            Ty: "Directed",
                            node_count: 2,
                            edge_count: 1,
                            edges: (0, 1),
                            node weights: {
                                0: Operation(
                                    Terminator(
                                        Ret(
                                            Ret {
                                                return_operand: None,
                                                debugloc: None,
                                            },
                                        ),
                                    ),
                                ),
                                1: Edge(
                                    CF(
                                        None,
                                    ),
                                ),
                            },
                            edge weights: {
                                0: 0,
                            },
                        },
                    ),
                    2: Edge(
                        CF(
                            Some(
                                Name(
                                    "done",
                                ),
                            ),
                        ),
                    ),
                    3: Edge(
                        CF(
                            None,
                        ),
                    ),
                    4: Thunk(
                        Graph {
                            Ty: "Directed",
                            node_count: 2,
                            edge_count: 1,
                            edges: (0, 1),
                            node weights: {
                                0: Operation(
                                    Terminator(
                                        Br(
                                            Br {
                                                dest: Name(
                                                    "done",
                                                ),
                                                debugloc: None,
                                            },
                                        ),
                                    ),
                                ),
                                1: Edge(
                                    CF(
                                        Some(
                                            Name(
                                                "done",
                                            ),
                                        ),
                                    ),
                                ),
                            },
                            edge weights: {
                                0: 0,
                            },
                        },
                    ),
                },
                edge weights: {
                    0: 0,
                    1: 0,
                    2: 0,
                },
            },
        ),
        1: Edge(
            FreeVar(
                Symbol {
                    symbol: "jump",
                },
            ),
        ),
    },
    edge weights: {
        0: 0,
    },
}
